# ==============================================================================
# Project: TreeCode
# ==============================================================================
#  _____ ____  _____ _____ ____ ___  ____  _____ 
# |_   _|  _ \| ____| ____/ ___/ _ \|  _ \| ____|
#   | | | |_) |  _| |  _|| |  | | | | | | |  _|  
#   | | |  _ <| |___| |__| |__| |_| | |_| | |___ 
#   |_| |_| \_|_____|_____\____\___/|____/|_____|
# 
# Licensed under the MIT License <http://opensource.org/licenses/MIT>.
# SPDX-License-Identifier: MIT
# TREECODE - Copyright (c) - Amr MOUSA 2025-2026
# ==============================================================================
#
# File: CMakeLists.txt
# Description: This project is a C++ library for managing hierarchical data
# structures. It includes classes for containers, elements, groups, templates,
# and logging. The library can be built as a shared library and includes options
# for building tests and examples.
#
# Author: Amr MOUSA
# License: MIT License
# Version: 0.0.1
# Date: 7 February 2025
#
# ==============================================================================

# Set the binary directory based on the source directory and build type.
# This will place the binaries in a subdirectory named 'binaries' within the source directory,
# with a further subdirectory for the specific build type (e.g., Debug, Release).
set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/binaries/${CMAKE_BUILD_TYPE})

# ==============================================================================
# 1. Example: Did_Tree
# ==============================================================================
# This CMakeLists.txt file defines a CMake project that creates an executable target named "Did_Tree".
# The executable is built from the source file located at "Did_Tree/main.cpp".
add_executable(Did_Tree 
    Did_Tree/main.cpp
    Did_Tree/print.cpp
)

# Adds a dependency for the target 'Did_Tree' on the library target '${CMAKE_PROJECT_NAME}Lib'.
# This ensures that '${CMAKE_PROJECT_NAME}Lib' is built before 'Did_Tree'.
add_dependencies(Did_Tree ${CMAKE_PROJECT_NAME}Lib)

# Links the target Did_Tree with the private library ${CMAKE_PROJECT_NAME}Lib.
# This means that ${CMAKE_PROJECT_NAME}Lib will be used only for Did_Tree and
# will not be exposed to other targets that link with Did_Tree.
target_link_libraries(Did_Tree PRIVATE ${CMAKE_PROJECT_NAME}Lib)

include_directories(Did_Tree/includes)

# Sets properties for the target 'Did_Tree':
# - RUNTIME_OUTPUT_DIRECTORY: Specifies the directory where the runtime 
#   executable will be placed. It is set to a path that includes the source 
#   directory, build type, and 'bin' directory.
# - OUTPUT_NAME: Defines the name of the output executable as 'Did_Tree'.

set_target_properties(Did_Tree PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin
    OUTPUT_NAME "Did_Tree"
)
# ==============================================================================